// import NextAuth from "next-auth";
// import AppleProvider from "next-auth/providers/apple";
// import GoogleProvider from "next-auth/providers/google";
// import EmailProvider from "next-auth/providers/email";
// import CredentialsProvider from "next-auth/providers/credentials";
// export default NextAuth({
//   secret: process.env.SECRET,
//   providers: [
//     // OAuth authentication providers
//     AppleProvider({
//       clientId: process.env.APPLE_ID,
//       clientSecret: process.env.APPLE_SECRET,
//     }),
//     GoogleProvider({
//       clientId: process.env.GOOGLE_ID,
//       clientSecret: process.env.GOOGLE_SECRET,
//     }),
//     // Sign in with passwordless email link
//     EmailProvider({
//       server: process.env.MAIL_SERVER,
//       from: "<no-reply@example.com>",
//     }),

//     CredentialsProvider({
//       // The name to display on the sign in form (e.g. 'Sign in with...')
//       name: "credentialsLogin",
//       id: "credentialsLogin",
//       // The credentials is used to generate a suitable form on the sign in page.
//       // You can specify whatever fields you are expecting to be submitted.
//       // e.g. domain, username, password, 2FA token, etc.
//       // You can pass any HTML attribute to the <input> tag through the object.
//       credentials: {
//         username: { label: "Username", type: "text", placeholder: "jsmith" },
//         password: { label: "Password", type: "password" },
//       },
//       async authorize(credentials, req) {
//         try {
//           console.log("heree");
//           // Add logic here to look up the user from the credentials supplied
//           const apiResponse = await userService.login(
//             credentials.email,
//             credentials.password
//           );

//           if (apiResponse) {
//             if (apiResponse.responseStatus === 200) {
//               if (apiResponse.user.emailNotify === true) {
//                 const user = { id: apiResponse.user, name: apiResponse };
//                 return user;
//               } else {
//                 throw new Error(
//                   "User need to verify email.&userId=" + apiResponse.user._id
//                 );
//               }
//             } else {
//               return null;
//             }
//           }
//           // Any object returned will be saved in `user` property of the JWT
//           else {
//             return null;
//           }

//           // const
//           // If you return null or false then the credentials will be rejected

//           // You can also Reject this callback with an Error or with a URL:
//           // throw new Error('error message') // Redirect to error page
//           // throw '/path/to/redirect'        // Redirect to a URL
//         } catch (e) {
//           const errorMessage = e;
//           // Redirecting to the login page with error message in the URL
//           throw new Error(
//             errorMessage +
//               "&email=" +
//               credentials.email +
//               "&password=" +
//               credentials.password
//           );
//         }
//       },
//     }),
//   ],
// });
